#+TITLE: Creating and Optimizing Stability Classifier Model across multiple metrics
#+PROPERTY: header-args :session /home/panos/.local/share/jupyter/runtime/kernel-e9da44a8-d92b-4fc5-b879-bf356d97b5a6.json
* dependencies
#+begin_src jupyter-python :exports results :results raw drawer
  import sys
  sys.path.append("/home/panos/src/cmcl")
  sys.path.append("/home/panos/src/yogi")
  # featurization
  from cmcl.data.frame import *
  from cmcl.features.categories import Categories
  from yogi.model_selection.butler import *
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports results :results raw drawer
  ## accelerated ml pipeline ##
  from sklearnex import patch_sklearn
  patch_sklearn()
#+end_src

  #+RESULTS:
  : Intel(R) Extension for Scikit-learn* enabled (https://github.com/intel/scikit-learn-intelex)
  
#+begin_src jupyter-python :exports results :results raw drawer
  # data tools
  import sqlite3
  import pandas as pd
  import numpy as np
  # feature engineering
  from sklearn.impute import SimpleImputer
  from sklearn.preprocessing import Normalizer, StandardScaler
  from sklearn.compose import TransformedTargetRegressor as ytRegressor
  # predictors
  #TBD
  ## pipeline workflow
  from sklearn.pipeline import make_pipeline as mkpipe
  from sklearn.model_selection import train_test_split as tts
  from sklearn.model_selection import GridSearchCV as gsCV
  # model eval
  from sklearn.metrics import make_scorer #TBD
  #visualization
  import matplotlib.pyplot as plt
  from sklearn import set_config
#+end_src

  #+RESULTS:
* load data
#+begin_src jupyter-python :exports results :results raw drawer
  sqlbase = """SELECT *
              FROM mannodi_base"""
  sqlref = """SELECT *
              FROM mannodi_ref_elprop"""
  sqlalmora = """SELECT *
                 FROM almora_agg"""
  with sqlite3.connect("/home/panos/src/cmcl/cmcl/db/perovskites.db") as conn:
      df = pd.read_sql(sqlbase, conn, index_col="index")
      lookup = pd.read_sql(sqlref, conn, index_col='index')
      almora = pd.read_sql(sqlalmora, conn, index_col='index')
#+end_src

#+RESULTS:

* Clean Data
#+begin_src jupyter-python :exports results :results raw drawer
  lookup = lookup.set_index("Formula")
  df = df.set_index(["Formula", "sim_cell"], append=True)
#+end_src

  #+RESULTS:

** manual subset index + subset constituents
- drop formula with large lattice parameter difference between HSE and PBE (calculation to be rerun)
- large structural deformation identified by observing cubicity metric -- well outside of 5-10% spec?
#+begin_src jupyter-python :exports results :results raw drawer
  df = df.drop(index=["Rb0.375Cs0.625GeBr3", "RbGeBr1.125Cl1.875", "K0.75Cs0.25GeI3", "K8Sn8I9Cl15"], level=1)
  maincomp = df.ft.comp().iloc[:, :14:]
  empcomp = df.ft.comp().loc[:, ["FA", "MA", "Cs", "Pb", "Sn", "I", "Br", "Cl"]]
#+end_src

#+RESULTS:

** generate and track mix categories
#+begin_src jupyter-python :exports results :results raw drawer
  mixlog = maincomp.collect.abx().groupby(level=0, axis=1).count()
  mix = mixlog.pipe(Categories.logif, condition=lambda x: x>1, default="pure")
  df = df.assign(mixing=mix).set_index("mixing", append=True)
  maincomp = maincomp.assign(mixing=mix).set_index("mixing", append=True)
  empcomp = empcomp.assign(mixing=mix).set_index("mixing", append=True)    
#+end_src

#+RESULTS:

** auto subset index
#+begin_src jupyter-python :exports results :results raw drawer
  size = df.index.isin(["2x2x2"], level="sim_cell")
  #maincomp
  maincomp = maincomp.collect.abx()
  mcg = maincomp.groupby(level=0, axis=1).sum()
  mvB, mvX, mvA, = mcg.A.isin([1, 8]), mcg.B.isin([1, 8]), mcg.X.isin([3, 24])
  #emcomp
  empcomp = empcomp.collect.abx()
  ecg = empcomp.groupby(level=0, axis=1).sum()
  evB, evX, evA, = ecg.A.isin([1, 8]), ecg.B.isin([1, 8]), ecg.X.isin([3, 24])
  #subset indexes
  mfocus = size*mvB*mvA*mvX
  efocus = size*evB*evA*evX
#+end_src

#+RESULTS:
: [INFO] 2022-04-05 14:37:53 - Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
: [INFO] 2022-04-05 14:37:53 - NumExpr defaulting to 8 threads.
: /opt/miniconda3/envs/aikit/lib/python3.9/site-packages/pandas/core/computation/expressions.py:204: UserWarning: evaluating in Python space because the '*' operator is not supported by numexpr for the bool dtype, use '&' instead
:   warnings.warn(

** apply subsets
#+begin_src jupyter-python :exports results :results raw drawer
  maincomp = maincomp[mfocus]
  empcomp = empcomp[efocus]
  mys = df[mfocus]
  eys = df[efocus] #only 56 compounds
#+end_src

#+RESULTS:

* Composition Models
** construct pipeline + create test/train splits
Normalize each sampled composition prior to regression
#+begin_src jupyter-python :exports results :results raw drawer
  fillna = SimpleImputer(strategy="constant", fill_value=0.0)
  cpipeRFR = mkpipe(fillna, Normalizer(), RandomForestRegressor())
  cpipeGPR = mkpipe(fillna, Normalizer(), GaussianProcessRegressor())
  cpipeGBR = mkpipe(fillna, Normalizer(), GradientBoostingRegressor())
  mc_tr, mc_ts, my_tr, my_ts = tts(maincomp, mys,
                                   train_size=0.8, random_state=0)
  ec_tr, ec_ts, ey_tr, ey_ts = tts(empcomp, eys,
                                   train_size=0.8, random_state=0)
#+end_src

#+RESULTS:
: [INFO] 2022-04-05 14:38:05 - sklearn.model_selection.train_test_split: running accelerated version on CPU
: [INFO] 2022-04-05 14:38:05 - sklearn.model_selection.train_test_split: fallback to original Scikit-learn
: [INFO] 2022-04-05 14:38:05 - sklearn.model_selection.train_test_split: running accelerated version on CPU
: [INFO] 2022-04-05 14:38:05 - sklearn.model_selection.train_test_split: fallback to original Scikit-learn

** construct Hyper-parameter Spaces
#+begin_src jupyter-python :exports results :results raw drawer
  
#+end_src
